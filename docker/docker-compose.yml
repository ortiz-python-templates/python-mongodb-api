services:

  # MongoDB
  mongodb:
    image: mongo:7
    container_name: mongodb
    env_file:
      - ../.env
    environment:
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - backend-net
    healthcheck:
      # Check if MongoDB is running and responding
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 10s
      retries: 5

  # Redis
  redis:
    image: redis:7
    container_name: redis_cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - backend-net
    healthcheck:
      # Check if Redis is alive
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Application (Python FastAPI + MongoDB)
  python-mongodb-api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: ${APP_NAME}
    env_file:
      - ../.env
    ports:
      - "${APP_PORT}:${APP_PORT}"   # FastAPI application
      - "8000:8000"                 # Prometheus metrics endpoint
    depends_on:
      - mongodb
      - redis
      - jaeger
    networks:
      - backend-net

  # Jaeger (Tracing)
  jaeger:
    image: jaegertracing/all-in-one:1.49
    container_name: jaeger
    ports:
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "16686:16686"
      - "14250:14250"
      - "14268:14268"
    networks:
      - backend-net
    healthcheck:
      # Check if Jaeger UI is reachable
      test: ["CMD", "curl", "-f", "http://localhost:16686/"]
      interval: 10s
      retries: 5
      timeout: 5s

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      # Map the local prometheus.yml configuration file to the container
      - ../observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - backend-net
    depends_on:
      - python-mongodb-api

  # Grafana (Dashboard)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - backend-net
    depends_on:
      - prometheus
    environment:
      # Set default admin password
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      # Provisioning datasources and dashboards automatically
      - ../observability/grafana/provisioning:/etc/grafana/provisioning
      # Custom dashboards JSON folder
      - ../observability/grafana/dashboards:/var/lib/grafana/dashboards

    # MinIO (Object Storage)
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"    # MinIO console and API
      - "9001:9001"    # MinIO web interface
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    volumes:
      - ./data/minio:/data
    networks:
      - backend-net
    healthcheck:
      # Check if MinIO is running
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      retries: 5
      timeout: 5s

# Volumes
volumes:
  mongodb_data:
  redis_data:
  minio_data:

# Networks
networks:
  backend-net:
